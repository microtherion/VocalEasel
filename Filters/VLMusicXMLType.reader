#!/usr/bin/ruby
#
# VLMusicXMLType.reader - Create plist from MusicXML
#

require File.dirname($0)+'/plistWriter'
require File.dirname($0)+'/vl'
require 'rexml/document'
require 'rexml/streamlistener'
require 'time'

OUTPUT = {'measures' => []}

PITCH = {
  'C' => 0,
  'D' => 2,
  'E' => 4,
  'F' => 5,
  'G' => 7,
  'A' => 9,
  'B' => 11
}

SYLL = {
  'single' => 0,
  'begin'  => 1,
  'end'    => 2,
  'middle' => 3
}

CHORD = {
  #
  # Triads
  #
  'major'              => VL::Chord::Maj,
  'minor'              => VL::Chord::Min,
  'augmented'          => VL::Chord::Aug,
  'diminished'         => VL::Chord::Dim,
  #
  # 7ths
  #
  'dominant'           => VL::Chord::Dom7,
  'major-seventh'      => VL::Chord::Maj7,
  'minor-seventh'      => VL::Chord::Min7,
  'diminished-seventh' => VL::Chord::Dim7,
  'augmented-seventh'  => VL::Chord::Aug7,
  'half-diminished'    => VL::Chord::M7b5,
  'major-minor'        => VL::Chord::MMin7,
  #
  # 6ths
  #
  'major-sixth'        => VL::Chord::Maj6,
  'minor-sixth'        => VL::Chord::Min6,
  #
  # 9ths
  #
  'dominant-ninth'     => VL::Chord::Dom9,
  'major-ninth'        => VL::Chord::Maj9,
  'minor-ninth'        => VL::Chord::Min9,
  #
  # 11ths
  #
  'dominant-11th'      => VL::Chord::Dom11,
  'major-11th'         => VL::Chord::Maj11,
  'minor-11th'         => VL::Chord::Min11,
  #
  # 13ths
  #
  'dominant-13th'      => VL::Chord::Dom13,
  'major-13th'         => VL::Chord::Maj13,
  'minor-13th'         => VL::Chord::Min13,
  #
  # Suspended
  #
  'suspended-second'   => VL::Chord::Sus2,
  'suspended-fourth'   => VL::Chord::Sus4,
  #
  # Varia
  #
  'other'              => VL::Unison,
  'none'               => 0
}

DEGREE = [
  [VL::Unison, VL::Unison],
  [VL::Min2nd+VL::Maj2nd, VL::Maj2nd],
  [VL::Min3rd+VL::Maj3rd, VL::Maj3rd],
  [VL::Fourth, VL::Fourth],
  [VL::Fifth, VL::Fifth],
  [VL::Aug5th+VL::Dim7th, VL::Dim7th],
  [VL::Min7th+VL::Maj7th, VL::Min7th],
  [VL::Octave, VL::Octave],
  [VL::Min9th+VL::Maj9th, VL::Maj9th],
  [VL::Aug9th+VL::Dim11th, VL::Dim11th],
  [VL::Eleventh, VL::Eleventh],
  [VL::Aug11th+VL::Dim13th, VL::Dim13th],
  [VL::Min13th+VL::Maj13th, VL::Maj13th]
];

class MusicXMLListener
  include REXML::StreamListener

  def initialize
    @text       = ""
    @nativeFile = false
  end

  def tag_start(tag, attrs)
    @kind = nil  # Ignore all tags not recognized here
    @text = ""
    case tag
    when 'score-timewise' 
      $stderr.puts "Can't read timewise MusicXML files yet"
      exit 1
    when 'work-title', 'movement-title' 
      @kind = 'textProp'
      @key  = 'title'
    when 'creator' 
      case attrs['type']
      when 'composer' 
        @kind = 'textProp'
        @key  = 'composer'
      when 'poet', 'lyricist' 
        @kind = 'textProp'
        @key  = 'lyricist'
      end
    when 'miscellaneous-field' 
      if attrs['name'] == 'VocalEasel-groove'
        @kind = 'textProp'
        @key  = 'groove'
      end
    when 'encoding-date' 
      @kind = 'dateProp'
      @key  = 'saved'
    when 'software' 
      @kind = 'textProp'
      @key  = 'software'
    when 'part' 
      @part   = attrs['id'] || ""
      @prop   = {}
      @props  = []
      @measNo = -1
    when 'measure' 
      @notes= []
      @note = nil
      @harm = []
      @chord= false
      @at   = 0
      if a = attrs['number']
        @measNo = a.to_i-1
      else
        @measNo += 1
      end
      unless @meas = OUTPUT['measures'][@measNo] 
        @meas = OUTPUT['measures'][@measNo] = {
          'measure'    => @measNo,
          'properties' => 0,
          'chords'     => [],
          'melody'     => []
        }
      end
    when 'print'
      if attrs['new-system'] == 'yes'
        @meas['new-system'] = true
      end
      if attrs['new-page'] == 'yes'
        @meas['new-page'] = true
      end      
    when 'barline' 
      @times     = nil
      @type      = nil
      @number    = ""
    when 'repeat' 
      if attrs['direction'] == 'backward' && attrs['times']
        @times = attrs['times'].to_i
      elsif attrs['direction'] == 'forward'
        @times = 0
      end
    when 'ending' 
      @type      = attrs['type']
      @number    = attrs['number']
    when 'sound' 
      if attrs['tocoda']
        @meas['tocoda'] = true
      elsif attrs['coda']
        @meas['coda'] = true
      end
      if attrs['tempo']
         OUTPUT['tempo'] = attrs['tempo'].to_i
      end
    when 'divisions' 
      @kind = 'prop'
      @key  = 'divisions'
    when 'fifths' 
      @kind = 'prop'
      @key  = 'key'
    when 'beats' 
      @kind = 'prop'
      @key  = 'timeNum'
    when 'beat-type' 
      @kind = 'prop'
      @key  = 'timeDenom'
    when 'words'
      #
      # 'words' is a very general direction type, but if we encoded the file
      # we know that we used it for groove names
      #
      @kind = 'groove' if @nativeFile
    when 'harmony' 
      @note = { 'pitch' => VL::NoPitch, 'steps' => 0, 'root' => VL::NoPitch,
                'at' => @at }
    when 'degree' 
      @degree_value = 0
      @degree_alter = 0
      @degree_type  = "alter"
    when 'note' 
      @note = { 'pitch' => 0, 'durNum' => 0, 'durDenom' => 0 }
    when 'rest' 
      @note['pitch'] = VL::NoPitch
    when 'mode', 'step', 'alter', 'octave', 'duration', 'syllabic', 'text',
         'root-step', 'root-alter', 'bass-step', 'bass-alter', 'kind',
         'degree-value', 'degree-alter', 'degree-type'
      @kind = tag
    when 'tie' 
      @note['tied'] ||= 0
      case attrs['type']
      when 'start' 
        @note['tied'] |= VL::TiedWithNext
      when 'stop' 
        @note['tied'] |= VL::TiedWithPrev
      end
    when 'lyric' 
      num = (attrs['number'] || "1").to_i-1
      @note['lyrics'] ||= []
      (0..num-1).each do |stanza| 
        @note['lyrics'][stanza] ||= {}
      end
      @note['lyrics'][num] = @lyric = {}
    when 'chord' 
      @chord = true
    end
  end

  def text(text)
    @text += text
  end

  def makeChords(chords)
    chords.each do |chord|
      chord['root'] = VL::NoPitch
      st = [*chord['pitch']].sort
      pitch = st[0] 
      if pitch > 0 && pitch < 60
        chord['root'] = st.shift
        pitch         = st[0] || VL::NoPitch
      end
      steps = 0
      if pitch > 0
        st.each do |step|
          steps |= 1<<(step-pitch)
        end
      end
      chord['steps'] = steps
      chord['pitch'] = pitch
    end

    return chords
  end

  def makeHarmChords(harm)
    chords = []
    durDenom = @prop['divisions']*4
    if harm[0]['at'] > 0
      chords.push({'pitch' => VL::NoPitch, 'steps' => 0, 'root' => VL::NoPitch,
                   'durNum' => harm[0]['at'], 'durDenom' => durDenom})
    end
    (0..harm.length-1).each do |i|
      chord = harm[i]
      nextAt = i+1 < harm.length ? harm[i+1]['at'] : @at
      chord['durNum']   = nextAt - chord.delete('at')
      chord['durDenom'] = durDenom
      chords.push(chord)
    end

    return chords
  end

  def makeVolta(number)
    volta = 0
    number.split(/,\s*/).each do |v|
      volta |= 1<<(v.to_i-1)
    end

    return volta
  end

  def saneDivisions(props)
    #
    # Dolet for Sibelius is using something like 768 divisions per quarter
    #
    props.each do |prop|
      if prop['divisions'] > 12
        prop['divisions'] = 2 # Should do this a lot smarter
      end
    end
  end

  def tag_end(tag)
    #
    # Interesting text nodes have @kind set
    #
    @text.strip!
    if @kind
      case @kind
      when 'textProp' 
        OUTPUT[@key] = @text
        if @key == 'software' && @text =~ /VocalEasel/
          @nativeFile = true # We (presumably) encoded this
        end
      when 'dateProp' 
		begin 
			OUTPUT[@key] = Time.parse(@text)
		rescue
			OUTPUT[@key] = Time.now
		end
      when 'prop' 
        @prop[@key] = @text.to_i
      when 'groove'
        @prop['groove'] = @text
      when 'mode' 
        @prop['mode'] = @text == 'minor' ? -1 : 1
      when 'step' 
        @note['pitch'] += PITCH[@text]
      when 'alter', 'root-alter' 
        @note['pitch'] += @text.to_i
      when 'octave' 
        @note['pitch'] += (@text.to_i+1)*12
      when 'duration' 
        if @note
          @note['durNum']   = @text.to_i
          @note['durDenom'] = @prop['divisions']*4
        else
          @duration = @text.to_i
        end
      when 'root-step' 
        @note['pitch'] = PITCH[@text]
      when 'bass-step' 
        @note['root'] = PITCH[@text]
      when 'bass-alter' 
        @note['root'] += @text.to_i
      when 'kind' 
        @note['steps'] = CHORD[@text]
      when 'degree-value' 
        @degree_value = @text.to_i-1
      when 'degree-alter' 
        @degree_alter = @text.to_i
      when 'degree-type' 
        @degree_type = @text
      when 'syllabic' 
        @lyric['kind'] = SYLL[@text]
      when 'text' 
        @lyric['text'] = @text
      end
      @kind = nil
    else
      #
      # Structures are distinguished by tag
      #
      case tag
      when 'attributes' 
        if @prop != @props.last
          @props.push(@prop.dup)
        end
      when 'note' 
        if @chord
          note = @notes.last
          note['pitch'] = [*note['pitch']] << @note['pitch']
          @chord = false
        else
          @notes.push(@note)
          @at += @note['durNum']
        end
        @note = nil
      when 'forward'
        @at += @duration
      when 'backup'
        @at -= @duration
      when 'degree' 
        oldSteps = @note['steps']
        oldValue = @degree_value
        case @degree_type 
        when 'subtract' 
          @note['steps'] &= ~DEGREE[@degree_value][0]
        when 'add' 
          @degree_value = DEGREE[@degree_value][1]
          if @degree_alter < 0
            @degree_value >>= -@degree_alter
          elsif @degree_alter > 0
            @degree_value <<= @degree_alter
          end
          @note['steps'] |= @degree_value
        when 'alter' 
          @degree_value = @note['steps'] & DEGREE[@degree_value][0]
          @note['steps'] ^= @degree_value
          if @degree_alter < 0
            @degree_value >>= -@degree_alter
          elsif @degree_alter > 0
            @degree_value <<= @degree_alter
          end
          @note['steps'] |= @degree_value
        end
      when 'harmony' 
        @harm.push(@note)
        @note = nil
      when 'barline' 
        case @type
        when 'start' 
          @meas['begin-ending'] = { 
            'volta' => makeVolta(@number)
          }
        when 'stop', 'discontinue' 
          @meas['end-ending'] = { 
            'volta' => makeVolta(@number),
            'last'  => @type == 'discontinue'
          }
        else
          if @times
            if @times > 0
              @meas['end-repeat'] = {
                'times' => @times
              }
            else @times == 0
              @meas['begin-repeat'] = {}
            end
          end
        end
      when 'measure' 
        @meas['properties'] = @props.length-1 unless @props.empty?
        if @part == 'HARM'
          @meas['chords'] = makeChords(@notes)
        else
          @meas['melody'] = @notes
          unless @harm.empty?
            @meas['chords'] = makeHarmChords(@harm)
          end
          if @measNo == 0
            #
            # If first measure is pickup, duration is shorter than time
            #
            denom   = @prop['divisions']*4
            timeLen = denom*@prop['timeNum'] / @prop['timeDenom']
            if @at < timeLen
              @meas['melody'].unshift(
                { 'pitch' => VL::NoPitch, 
                  'durNum' => timeLen-@at, 'durDenom' => denom })
              @meas['chords'].unshift(
                { 'pitch' => VL::NoPitch, 'root' => VL::NoPitch, 'steps' => 0,
                  'durNum' => timeLen-@at, 'durDenom' => denom }) unless @harm.empty?
            end
          end
        end
      when 'part' 
        OUTPUT['properties'] = saneDivisions(@props) unless @part == 'HARM'
      end
    end
  end
end

listener = MusicXMLListener.new
REXML::Document.parse_stream(INFILE, listener)
writePlist($stdout, OUTPUT)

# Local Variables:
# mode:ruby
# End:
