#!/usr/bin/ruby
#
# VLBIABType.reader - Import Band-in-a-Box files
#
# Based on reverse engineering work by Alf Warnock & Alain Brenzikofer
#

require File.dirname($0)+'/plistWriter'
require File.dirname($0)+'/vl'

MEAS = []
PROP = {
  'key'       => 0,
  'mode'      => 1,
  'timeNum'   => 4,
  'timeDenom' => 4
}
OUTPUT = {
  'measures'  => MEAS,
  'properties'=> [PROP]                          
}

GROOVE = [['Swing'],	        # Jazz Swing
          [nil, 12, 8],         # Country 12/8
          ['Country'],	        # Country 4/4
          ['BossaNova'],        # Bossa Nova
          [nil],                # Ethnic
          [nil],                # Blues Shuffle
          ['Blues'],	        # Blues Straight
          ['Waltz', 3, 4],	# Waltz
          ['PopBallad'],	# Pop Ballad
          ['Rock'],	        # should be Rock Shuffle 
          ['Rock'],	        # lite Rock
          ['Rock'],	        # medium Rock
          ['Rock'],	        # Heavy Rock
          ['Rock'],	        # Miami Rock
          [nil],                # Milly Pop
          [nil],                # Funk
          ['JazzWaltz', 6, 8],	# Jazz Waltz
          ['Rhumba'],	        # Rhumba
          [nil],                # Cha Cha
          [nil],                # Bouncy
          [nil],                # Irish
          [nil],                # Pop Ballad 12/8
          [nil],                # Country12/8 old
          [nil]                 # Reggae
         ]

STY_GROOVE = {
  '54_SWING' => ['Jazz54',    5, 4],
  'AFRCUB68' => ['JazzWaltz', 6, 8]
}

KEY = [[ 0, 1], 
       [ 0, 1], [-5, 1], [ 2, 1], [-3, 1], [ 4, 1], [-1, 1], 
       [-6, 1], [ 1, 1], [-4, 1], [ 3, 1], [-2, 1], [ 5, 1], 
       [ 7, 1], [ 9, 1], [ 6, 1], [ 8, 1], [10, 1],
       [-3,-1], [ 4,-1], [-1,-1], [-6,-1], [ 1,-1], [-4,-1],
       [ 3,-1], [-2,-1], [ 5,-1], [ 0,-1], [-5,-1], [ 2,-1],
       [ 4,-1], [ 6,-1], [ 3,-1], [ 5,-1], [ 7,-1]]

INFILE.read(1) # Skip 1 Byte
titleLen = INFILE.read(1)[0]
OUTPUT['title'] = INFILE.read(titleLen)

INFILE.read(2) # Skip 2 Bytes
gr               = INFILE.read(1)[0]-1
groove           = GROOVE[gr] || ['Swing']
key = KEY[INFILE.read(1)[0]]
PROP['key']      = key[0]
PROP['mode']     = key[1]
OUTPUT['tempo']  = INFILE.read(1)[0] 

#
# Style map - not processed yet
#
STYLES = []
i=0
while i < 256
  st = INFILE.read(1)[0]
  if st > 0
    STYLES[i-1] = st
    i          += 1
  else
    i          += INFILE.read(1)[0]
  end
end

#
# Chord extensions
#
EXT   = [
  nil,    
  VL::Chord::Maj,
  VL::Chord::Maj,
  VL::Unison | VL::Maj3rd | VL::Dim5th,
  VL::Chord::Aug,
  VL::Chord::Maj6,
  VL::Chord::Maj7,
  VL::Chord::Maj9,
  VL::Chord::Maj9 | VL::Aug11th,
  VL::Chord::Maj9 | VL::Aug11th | VL::Maj13th,
  VL::Chord::Maj13, # 10
  nil,    
  VL::Chord::Aug,
  VL::Chord::Aug | VL::Maj7th,
  VL::Chord::Maj6 | VL::Maj9th,
  VL::Chord::Sus2,
  VL::Chord::Min,
  VL::Unison | VL::Min3rd | VL::Aug5th,
  VL::Chord::MMin7,
  VL::Chord::Min7,
  VL::Chord::Min9,                                               # 20
  VL::Chord::Min11,
  VL::Chord::Min13,
  VL::Chord::Min6,
  VL::Unison | VL::Min3rd | VL::Aug5th,
  VL::Unison | VL::Min3rd | VL::Aug5th | VL::Min7th,
  VL::Unison | VL::Min3rd | VL::Fifth  | VL::Dim7th | VL::Maj9th,
  nil,    
  nil,    
  nil,    
  nil,                                                           # 30
  nil,    
  VL::Chord::M7b5,
  VL::Chord::Dim,
  VL::Chord::M7b5 | VL::Maj9th,
  nil,    
  nil,    
  nil,    
  nil,    
  nil,    
  VL::Unison | VL::Fifth,                                        # 40
  nil,    
  nil,    
  nil,    
  nil,    
  nil,    
  nil,    
  nil,    
  nil,    
  nil,    
  nil,                                                           # 50
  nil,    
  nil,    
  nil,    
  nil,    
  nil,    
  VL::Chord::Aug7,
  VL::Chord::Aug,
  VL::Chord::Aug7 | VL::Maj9th | VL::Eleventh | VL::Maj13th,
  nil,    
  nil,                                                           # 60
  nil,    
  nil,    
  nil,    
  VL::Chord::Dom7,
  VL::Chord::Dom13,
  VL::Chord::Dom7 | VL::Min13th,
  VL::Chord::Dom7 | VL::Aug11th,
  nil,    
  nil,    
  VL::Chord::Dom9,                                               # 70 ???
  nil,    
  VL::Chord::Dom9 | VL::Min13th,
  VL::Chord::Dom9 | VL::Aug11th,
  VL::Chord::Dom9 | VL::Aug11th | VL::Maj13th,
  nil,    
  VL::Chord::Dom7 | VL::Min9th,
  VL::Chord::Dom7 | VL::Min9th | VL::Maj13th,
  nil,    
  VL::Chord::Dom7 | VL::Min9th | VL::Aug11th,
  nil,                                                           # 80
  nil,    
  VL::Chord::Dom7 | VL::Aug9th,
  VL::Chord::Dom7 | VL::Aug9th | VL::Maj13th,
  VL::Chord::Dom7 | VL::Aug9th | VL::Min13th,
  VL::Chord::Dom9 | VL::Aug11th,
  nil,    
  nil,    
  VL::Unison | VL::Maj3rd | VL::Dim5th | VL::Min7th,
  VL::Unison | VL::Maj3rd | VL::Dim5th | VL::Min7th | VL::Maj13th,
  nil,                                                           # 90
  VL::Unison | VL::Maj3rd | VL::Dim5th | VL::Min7th | VL::Maj9th,
  nil,    
  VL::Unison | VL::Maj3rd | VL::Dim5th | VL::Min7th | VL::Min9th,
  nil,    
  nil,    
  VL::Unison | VL::Maj3rd | VL::Dim5th | VL::Min7th | VL::Aug9th,
  nil,    
  nil,    
  VL::Chord::Aug7,
  nil,                                                           # 100
  nil,    
  nil,    
  VL::Chord::Aug7 | VL::Maj9th,
  nil,    
  VL::Chord::Aug7 | VL::Min9th,
  nil,    
  nil,    
  nil,    
  VL::Chord::Aug7 | VL::Aug9th,
  nil,                                                           # 110
  nil,    
  nil,    
  VL::Unison | VL::Maj3rd | VL::Dim7th | VL::Min7th | VL::Min9th,
  nil,    
  nil,    
  nil,    
  nil,    
  nil,    
  nil,    
  nil,                                                           # 120
  nil,    
  nil,    
  nil,    
  nil,    
  nil,    
  nil,    
  nil,    
  VL::Chord::Sus4 | VL::Min7th,
  VL::Chord::Sus4 | VL::Min7th | VL::Maj9th | VL::Maj13th,
  nil,                                                           # 130
  nil,    
  nil,    
  nil,    
  VL::Chord::Dom11,
  nil,    
  nil,    
  nil,    
  nil,    
  nil,    
  VL::Chord::Sus4 | VL::Min7th | VL::Min9th,                     # 140
  nil,    
  nil,    
  nil,    
  nil,    
  nil,    
  VL::Chord::Sus4 | VL::Min7th | VL::Aug9th,
  nil,    
  nil,    
  nil,    
  nil,                                                           # 150
  nil,    
  nil,    
  nil,    
  nil,    
  nil,    
  nil,    
  nil,    
  nil,    
  nil,    
  nil,                                                           # 160
  nil,    
  nil,    
  VL::Unison | VL::Dim5th | VL::Aug5th,
  nil,    
  nil,    
  nil,    
  nil,    
  nil,    
  nil,    
  nil,                                                           # 170
  nil,    
  nil,    
  nil,    
  nil,    
  nil,    
  nil,    
  VL::Chord::Sus4,
  nil,    
  nil,    
  nil,                                                           # 180
  nil,    
  nil,    
  nil,    
  VL::Chord::Sus4
];

STEPS = []
i     = 0
while i < 1020
  ex = INFILE.read(1)[0]
  if ex > 0
    STEPS[i] = EXT[ex]
    i       += 1
  else
    i       += INFILE.read(1)[0]
  end
end

PITCHES = [0, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
                  61,     63,         66,     68,     70]
CHORDS  = []
ROOTS   = []
i       = 0
while i < 1021
  cr = INFILE.read(1)[0]
  if cr > 0
    CHORDS[i] = PITCHES[cr % 18]
    if cr > 18
      ROOTS[i] = PITCHES[(cr/18+cr%18) % 12]
    end
    i       += 1
  else
    i       += INFILE.read(1)[0]
  end
end

INFILE.read(1) # Start measure
numMeasures = INFILE.read(1)[0]
numRepeats  = INFILE.read(1)[0]

biab      = INFILE.read

styleFile = nil
if biab =~ /B.(.{1,8})\.STY/m
  styleFile = $1
end
noteCount = 0
if biab =~ /\x00\xFF\x00(?:\x0D|\x0E|\x0F)(..)/m
  noteCount = $1.unpack('v')[0]
end

if styleFile
  styleFile = File.basename(styleFile, '.STY')
  puts "Style #{styleFile}" if $DEBUG
  groove = STY_GROOVE[styleFile] || groove
end
OUTPUT['groove'] = groove[0] || 'Swing'
if groove.size > 1
  PROP['timeNum']   = groove[1]
  PROP['timeDenom'] = groove[2]
end

RAWNOTES = []
if biab.sub!(/^.*?\xA0\xB0\xC1/m, '')
  noteCount = biab.length / 12 if noteCount == 0
  (0...noteCount).each do |i|
    onset, channel, pitch, velocity, duration = biab[i*12, 12].unpack('VCCCxV')
    break if channel==0
    puts "O #{onset}; C #{channel}; P #{pitch}; V #{velocity}; D #{duration}" if $DEBUG
    if channel==176 or channel==179 or channel==180
      pitch = VL::NoPitch
    end
    onset = ((onset+5) / 10.0).floor
    RAWNOTES.push([onset, pitch])
  end
end

p RAWNOTES, CHORDS, STEPS, ROOTS if $DEBUG

CHORDS.pop
measLen        = VL::Fract.new(PROP['timeNum']*48, PROP['timeDenom']).num
measNo         = 0
nextMeas       = 0
melo           = nil
lastNote       = nil
lastOnset      = 0
maxMeas        = 0
while RAWNOTES.size > 0 || CHORDS.size > 0
  if note = RAWNOTES.shift
    if note[0] > nextMeas
      #
      # Create new note for rest
      #
      RAWNOTES.unshift(note)
      if lastNote
        lastNote['tied'] ||= 0
        lastNote['tied']  |= VL::TiedWithNext
        RAWNOTES.unshift([nextMeas, lastNote['pitch'], true])
      else
        RAWNOTES.unshift([nextMeas, VL::NoPitch])
      end
      redo
    elsif note[0] == nextMeas
      #
      # Start new measure
      #
      melo      = []
      meas      = {'measure' => measNo, 'melody' => melo}
      MEAS.push(meas)
      measNo   += 1
      nextMeas += measLen
    end
    if lastNote 
      lastDur              = VL::Fract.new(note[0]-lastOnset, 48)
      lastNote['durNum']   = lastDur.num
      lastNote['durDenom'] = lastDur.denom
    end
    lastOnset = note[0]
    lastNote  = {'pitch' => note[1], 'tied' => note[2] ? VL::TiedWithPrev : 0}
    melo.push(lastNote)
    if note[1] != VL::NoPitch
      maxMeas = measNo-1
    end
  else 
    if lastNote
      lastDur              = VL::Fract.new(nextMeas-lastOnset, 48)
      lastNote['durNum']   = lastDur.num
      lastNote['durDenom'] = lastDur.denom
      lastNote             = nil
    end
    silence = {
      'pitch' => VL::NoPitch, 
      'durNum' => PROP['timeNum'], 'durDenom' => PROP['timeDenom']
    }
    meas      = {'measure' => measNo, 'melody' => [silence]}
    MEAS.push(meas)
    measNo   += 1
    nextMeas += measLen
  end
  if measNo > 2 && CHORDS.size > 0 && !meas['chords']
    meas['chords'] = chords = []
    time = VL::Fract.new(PROP['timeNum'], PROP['timeDenom'])
    (0..3).each do |i|
      if i==2 && time > VL::Fract.new(4,4)
        extra = time - VL::Fract.new(4,4)
        chords.push({'pitch' => VL::NoPitch, 
                      'durNum' => extra.num, 'durDenom' => extra.denom})
      end
      pitch   = CHORDS.shift
      steps   = STEPS.shift
      root    = ROOTS.shift
      pitch ||= VL::NoPitch
      steps ||= 0
      root  ||= VL::NoPitch
      chords.push({'pitch' => pitch, 'steps' => steps, 'root' => root,
                    'durNum' => 1, 'durDenom' => 4})
      if pitch != VL::NoPitch
        maxMeas = measNo-1
      end
    end
    if time < VL::Fract.new(3,4)
      chords.pop
      chords.pop
    elsif time < VL::Fract.new(4,4)
      chords.pop
    end
  end
end

MEAS[maxMeas+1..-1] = nil
adjust = 0
if MEAS.size > 1 && MEAS[0]['melody'].size == 1 &&
    MEAS[0]['melody'][0]['pitch'] == VL::NoPitch
  if MEAS.size > 2 && MEAS[1]['melody'].size == 1 &&
      MEAS[1]['melody'][0]['pitch'] == VL::NoPitch
    #
    # No lead-in
    #
    MEAS.shift
    MEAS.shift
    adjust = 2
  else
    #
    # 1 measure lead-in
    #
    MEAS.shift
    adjust = 1
  end
  MEAS.each do |m| m['measure'] -= adjust end
end

writePlist($stdout, OUTPUT)

# Local Variables:
# mode:ruby
# End:
