#!/usr/bin/ruby
#
# VLMusicXMLType.write - Translate plist into MusicXML
#

require File.dirname($0)+'/plistReader'
require File.dirname($0)+'/vl'
require 'rexml/document'

INPUT = readPlist($stdin)

$USE_FLATS = false
$DIVISIONS = 3

def newTextElement(name, text)
  elt = REXML::Element.new(name)
  elt.add_text(text.to_s)

  return elt
end

def _work
  work = REXML::Element.new('work')
  work.add_element newTextElement('work-title', INPUT['title'])

  return work
end

def _identification
  ident = REXML::Element.new('identification')
    composer = newTextElement('creator', INPUT['composer'])
    composer.add_attribute('type', 'composer')
  ident.add_element(composer)
    poet = newTextElement('creator', INPUT['lyricist'])
    poet.add_attribute('type', 'poet')
  ident.add_element(poet)
    encoding = REXML::Element.new('encoding')
      date = newTextElement('encoding-date', INPUT['saved'].strftime("%Y-%m-%d"))
    encoding.add_element(date)
      software = newTextElement('software', INPUT['software'])
    encoding.add_element(software)
  ident.add_element(encoding)

  return ident
end

def _part_list
  part_list = REXML::Element.new('part-list')
    chords = REXML::Element.new('score-part')
    chords.add_attribute('id', 'HARM')
    chords.add_element newTextElement('part-name', 'Chords')
  part_list.add_element(chords)
    melody = REXML::Element.new('score-part')
    melody.add_attribute('id', 'MELO')
    melody.add_element newTextElement('part-name', 'Melody')
  part_list.add_element(melody)

  return part_list
end

def _attributes(prop)
  $USE_FLATS = prop['key'] < 0
  $DIVISIONS = prop['divisions']
  attr = REXML::Element.new('attributes')
  attr.add_element newTextElement('divisions', prop['divisions'])
    key = REXML::Element.new('key')
    key.add_element newTextElement('fifths', prop['key'])
    key.add_element newTextElement('mode', prop['mode'] > 0 ? "major" : "minor")
  attr.add_element(key)
    time = REXML::Element.new('time')
    time.add_element newTextElement('beats', prop['timeNum'])
    time.add_element newTextElement('beat-type', prop['timeDenom'])
  attr.add_element(time)
    clef = REXML::Element.new('clef')
    clef.add_element newTextElement('sign', 'G')
    clef.add_element newTextElement('line', 2)
  attr.add_element(clef)

  return attr
end

STEPS = 'C DbD EbE F GbG AbA BbB '

def _note(pitch, dur, tied=0)
  note = REXML::Element.new('note')
  if pitch == VL::NoPitch
    note.add_element(REXML::Element.new('rest'))
  else
    oct  = pitch/12 - 1
    stp  = 2*(pitch%12)
    step = STEPS[stp]
    alt  = STEPS[stp+1] == ?b
    if alt
      if $USE_FLATS
        alt = -1
      else
        step = step == ?A ? ?G : step-1
        alt  = 1
      end
    end
    if (tied & VL::InChord) != 0
      note.add_element 'chord'
    end
    pitch= REXML::Element.new('pitch')
    pitch.add_element newTextElement('step', step.chr)
    if alt
      pitch.add_element newTextElement('alter', alt)
    end
    pitch.add_element newTextElement('octave', oct)
    note.add_element(pitch)
  end
  note.add_element newTextElement('duration', dur)
  if (tied & VL::TiedWithPrev) != 0
    note.add_element 'tie', {'type' => 'stop' }
  end
  if (tied & VL::TiedWithNext) != 0
    note.add_element 'tie', {'type' => 'start' }
  end
  note.add_element newTextElement('voice', 1)

  return note
end
  
def _chords
  chords = REXML::Element.new('part')
  chords.add_attribute('id', 'HARM')
  
  lastProp = -1
  measNum  = 0
  INPUT['measures'].each do |meas|
    measNum += 1
    m = REXML::Element.new('measure')
    m.add_attribute('number', measNum.to_s);
    if meas['properties'] != lastProp
      lastProp = meas['properties']
      m.add_element(_attributes(INPUT['properties'][lastProp]))
    end
    meas['chords'].each do |chord|
      dur = (chord['durNum'] * $DIVISIONS * 4) / chord['durDenom']
      if chord['pitch'] == VL::NoPitch
        m.add_element _note(VL::NoPitch, dur)
      else
        seenNote = 0
        if chord['root'] != VL::NoPitch
          m.add_element _note(chord['root'], dur)
          seenNote = VL::InChord
        end
        pitch = chord['pitch']
        steps = chord['steps']
        (0..25).each do |step|
          if (steps & (1<<step)) != 0
            m.add_element _note(pitch+step, dur, seenNote)
            seenNote = VL::InChord
          end
        end
      end
    end
    chords.add_element(m)
  end

  return chords
end

SYLLABLE = %w[single begin end middle]

def _melody
  melody = REXML::Element.new('part')
  melody.add_attribute('id', 'MELO')
  
  lastProp = -1
  measNum  = 0
  repeat   = [0]
  INPUT['measures'].each do |meas|
    r = 0
    r |= 1 if meas['begin-repeat']
    r |= 2 if meas['end-repeat']
    repeat.push r
  end
  repeat.push 0
  INPUT['measures'].each do |meas|
    measNum += 1
    m = REXML::Element.new('measure')
    m.add_attribute('number', measNum.to_s);
    if meas['properties'] != lastProp
      lastProp = meas['properties']
      m.add_element(_attributes(INPUT['properties'][lastProp]))
    end
    if meas['coda']
      m.add_element 'sound', {'coda' => 'A'}
    end
    if meas['begin-repeat']
      barline = REXML::Element.new('barline')
      barline.add_attribute('location', 'left')
      barline.add_element newTextElement('bar-style', 
                 (repeat[measNum-1] & 2) != 0 ? 'heavy-heavy' : 'heavy-light')
      barline.add_element 'repeat', {'direction' => 'forward'}
      m.add_element(barline)
    end
    if ending = meas['begin-ending']
      barline = REXML::Element.new('barline')
      barline.add_attribute('location', 'left')
      volta = ending['volta']
      num   = nil
      (0..7).each do |i|
        if (volta & (1<<i)) != 0
          if num
            num += ",#{i+1}"
          else
            num = (i+1).to_s
          end
        end
      end
      barline.add_element 'ending', {'type' => 'start', 'number' => num}
      m.add_element(barline)
    end
    meas['melody'].each do |note|
      dur = (note['durNum'] * $DIVISIONS * 4) / note['durDenom']
      n   = _note(note['pitch'], dur, note['tied'])
      stanza = 1
      note['lyrics'].each do |syll|
        if syll['text']
          lyr = REXML::Element.new('lyric')
          lyr.add_attribute('number', stanza.to_s)
          lyr.add_element newTextElement('syllabic', SYLLABLE[syll['kind']])
          lyr.add_element newTextElement('text', syll['text'])
          n.add_element(lyr)
        end
      end
      m.add_element(n)
    end
    if r = meas['end-repeat']
      barline = REXML::Element.new('barline')
      barline.add_attribute('location', 'right')
      barline.add_element newTextElement('bar-style', 
                 (repeat[measNum+1] & 1) != 0 ? 'heavy-heavy' : 'light-heavy')
      barline.add_element 'repeat', {'direction' => 'backward', 'times' => r['times'].to_s}
      m.add_element(barline)      
    end
    if ending = meas['end-ending']
      barline = REXML::Element.new('barline')
      barline.add_attribute('location', 'right')
      barline.add_element newTextElement('bar-style', 
                 (repeat[measNum+1] & 1) != 0 ? 'heavy-heavy' : 'light-heavy')
      barline.add_element 'repeat', {'direction' => 'backward'}
      volta = ending['volta']
      num   = nil
      (0..7).each do |i|
        if (volta & (1<<i)) != 0
          if num
            num += ",#{i+1}"
          else
            num = (i+1).to_s
          end
        end
      end
      type = ending['last'] ? "discontinue" : "stop"
      barline.add_element 'ending', {'type', type, 'number', num}
      m.add_element(barline)      
    end
    if meas['tocoda']
      m.add_element 'sound', {'tocoda' => 'A'}
    end
    melody.add_element(m)
  end

  return melody
end

def _score  
  score = REXML::Element.new('score-partwise')
  score.add_attribute('version', '1.1')
  score.add_element(_work)
  score.add_element(_identification)
  score.add_element(_part_list)
  score.add_element(_chords)
  score.add_element(_melody)

  return score
end

xml  = REXML::Document.new 
xml.add REXML::XMLDecl.new('1.0', 'UTF-8')
xml.add REXML::DocType.new(['score-partwise', 'PUBLIC',
	 '"-//Recordare//DTD MusicXML 1.1 Partwise//EN"',
	 '"http://www.musicxml.org/dtds/partwise.dtd"'])
xml.add_element(_score)
xml.write($stdout, 0)

# Local Variables:
# mode:ruby
# End:
